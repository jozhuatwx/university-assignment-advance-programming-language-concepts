package denguestatisticssystem;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.IntStream;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.javatuples.Pair;

public class StatisticsPanel extends javax.swing.JPanel {
    private List<Pair<String, Integer>> totalDengueCases;
    private BidirectionalMap<Integer, String> districtMap;
    
    public StatisticsPanel(List<DengueCase> dengueCasesList, BidirectionalMap<Integer, String> districtMap) {
        initComponents();

        try {
            // set properties
            this.districtMap = districtMap;

            // calculate total dengue cases per district
            totalDengueCases = totalDengueCasesPerDistrict(dengueCasesList, districtMap);
            // display total dengue cases in table
            displayTotalDengueCases(totalDengueCases);

            // calculate highest and lowest cases
            Pair<String, Integer> highestCases = districtHighestCases(totalDengueCases, districtMap);
            Pair<String, Integer> lowestCases = districtLowestCases(totalDengueCases, districtMap);

            // set highest and lowest cases into textboxes
            lblHighestCasesDistrict.setText(highestCases.getValue0());
            lblHighestCasesCases.setText(highestCases.getValue1().toString());
            lblLowestCasesDistrict.setText(lowestCases.getValue0());
            lblLowestCasesCases.setText(lowestCases.getValue1().toString());
        } catch (Exception e) {
            // display error message box
            JOptionPane.showMessageDialog(new JFrame(), e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // get total number of dengue cases according to district
    private static List<Pair<String, Integer>> totalDengueCasesPerDistrict(List<DengueCase> dengueCasesList, BidirectionalMap<Integer, String> districtMap) {
        // initialise arraylist of pairs
        List<Pair<String, Integer>> totalCases = new ArrayList<>();
        districtMap.entrySet()
            .forEach(district -> totalCases.add(new Pair<>("", 0)));

        // loop through dengue cases list
        dengueCasesList.forEach(dengueCase ->
            // set the cumulative cases
            totalCases.set(
                // use index from district bidirectional map
                districtMap.getKey(dengueCase.getDistrict()),
                new Pair<>(
                    // get district name
                    dengueCase.getDistrict(),
                    // get total number of cases and add current cases
                    totalCases.get(districtMap.getKey(dengueCase.getDistrict())).getValue1() + dengueCase.getCases()
                )
            )
        );

        // return list of cases according to district bidirectional map
        return totalCases;
    }

    // get district with lowest number of cases
    private static Pair<String, Integer> districtLowestCases(List<Pair<String, Integer>> totalCasesList, BidirectionalMap<Integer, String> districtMap) {
        // get index of district with lowest cases
        int index = IntStream.range(0, totalCasesList.size())
            // eliminate to find district with lowest cases
            .reduce((a, b) -> totalCasesList.get(a).getValue1() > totalCasesList.get(b).getValue1() ? b : a)
            .getAsInt();

        // return district and number of cases
        return new Pair<>(districtMap.getValue(index), totalCasesList.get(index).getValue1());
    }

    // get district with highest number of cases
    private static Pair<String, Integer> districtHighestCases(List<Pair<String, Integer>> totalCasesList, BidirectionalMap<Integer, String> districtMap) {
        // get index of district with highest cases
        int index = IntStream.range(0, totalCasesList.size())
            // eliminate to find district with highest cases
            .reduce((a, b) -> totalCasesList.get(a).getValue1() < totalCasesList.get(b).getValue1() ? b : a)
            .getAsInt();

        // return district and number of cases
        return new Pair<>(districtMap.getValue(index), totalCasesList.get(index).getValue1());
    }

    // bind total dengue cases list to table
    private void displayTotalDengueCases(List<Pair<String, Integer>> totalDengueCasesList) {
        // create default table model
        DefaultTableModel model = (DefaultTableModel) tblTotalDengueCases.getModel();

        // clear existing model
        model.setRowCount(0);

        // copy data to table model
        totalDengueCasesList.forEach(dengueCase ->
            model.addRow(dengueCase.toArray())
        );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblTotalDengueCases = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        lblLowestCasesDistrict = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        lblLowestCasesCases = new javax.swing.JTextField();
        lblHighestCasesDistrict = new javax.swing.JTextField();
        lblHighestCasesCases = new javax.swing.JTextField();
        btnDescSort = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();

        tblTotalDengueCases.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "District", "Cases"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblTotalDengueCases);

        jLabel1.setText("Lowest Cases");

        lblLowestCasesDistrict.setMaximumSize(new java.awt.Dimension(80, 25));
        lblLowestCasesDistrict.setMinimumSize(new java.awt.Dimension(80, 25));
        lblLowestCasesDistrict.setPreferredSize(new java.awt.Dimension(80, 25));

        jLabel2.setText("Highest Cases");

        lblLowestCasesCases.setMaximumSize(new java.awt.Dimension(80, 25));
        lblLowestCasesCases.setMinimumSize(new java.awt.Dimension(80, 25));
        lblLowestCasesCases.setPreferredSize(new java.awt.Dimension(80, 25));

        lblHighestCasesDistrict.setMaximumSize(new java.awt.Dimension(80, 25));
        lblHighestCasesDistrict.setMinimumSize(new java.awt.Dimension(80, 25));
        lblHighestCasesDistrict.setPreferredSize(new java.awt.Dimension(80, 25));

        lblHighestCasesCases.setMaximumSize(new java.awt.Dimension(80, 25));
        lblHighestCasesCases.setMinimumSize(new java.awt.Dimension(80, 25));
        lblHighestCasesCases.setPreferredSize(new java.awt.Dimension(80, 25));

        btnDescSort.setText("Sort (Desc)");
        btnDescSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDescSortActionPerformed(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblLowestCasesDistrict, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblLowestCasesCases, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblHighestCasesDistrict, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblHighestCasesCases, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnReset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDescSort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLowestCasesDistrict, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLowestCasesCases, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHighestCasesDistrict, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHighestCasesCases, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnReset)
                .addGap(10, 10, 10)
                .addComponent(btnDescSort)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDescSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDescSortActionPerformed
        try {
            // get descendingly sorted total dengue cases
            List<Pair<String, Integer>> sortedTotalDengueCases = PrologConnection.getDescSortedList(totalDengueCases, districtMap);
            // display descendingly sorted total dengue cases in table
            displayTotalDengueCases(sortedTotalDengueCases);
        } catch (Exception e) {
            // display error message box
            JOptionPane.showMessageDialog(new JFrame(), e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDescSortActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        try {
            // display total dengue cases in table
            displayTotalDengueCases(totalDengueCases);
        } catch (Exception e) {
            // display error message box
            JOptionPane.showMessageDialog(new JFrame(), e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnResetActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDescSort;
    private javax.swing.JButton btnReset;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lblHighestCasesCases;
    private javax.swing.JTextField lblHighestCasesDistrict;
    private javax.swing.JTextField lblLowestCasesCases;
    private javax.swing.JTextField lblLowestCasesDistrict;
    private javax.swing.JTable tblTotalDengueCases;
    // End of variables declaration//GEN-END:variables
}
